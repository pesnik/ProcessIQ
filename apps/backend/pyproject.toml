[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "processiq"
version = "0.1.0"
description = "Intelligent Process Automation Platform - Traditional RPA + AI Agents"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "ProcessIQ Team"},
]
keywords = ["rpa", "automation", "ai", "vision-language", "workflow", "data-processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework - ALWAYS INCLUDED (Traditional RPA Foundation)
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic_settings>=2.10.1",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    # Task queue and caching - Traditional RPA core
    "celery>=5.3.0",
    "redis>=5.0.0",
    # Web automation - Traditional RPA core
    "playwright>=1.40.0",
    "selenium>=4.15.0",
    "requests>=2.31.0",
    "httpx>=0.25.0",
    # Data processing - Traditional RPA core
    "pandas>=2.1.0",
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    # Desktop automation - Traditional RPA core
    "pyautogui>=0.9.54",
    "pygetwindow>=0.0.9",
    "psutil>=5.9.0",
    # Basic document processing - Traditional RPA core
    "pdfplumber>=0.10.0",
    "pillow>=10.1.0", # Basic image handling only
    # Database drivers - Traditional RPA core
    "psycopg2-binary>=2.9.7",
    "pymongo>=4.6.0",
    # Configuration and utilities - Core infrastructure
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    # Logging and monitoring - Core infrastructure
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "croniter",
    "pytz",
]

[project.optional-dependencies]
# =============================================================================
# PRICING TIERS - Pay-as-you-grow model
# =============================================================================

# STARTER TIER - Traditional RPA only (uses core dependencies above)
# No additional dependencies needed - clients pay for traditional automation only

# SMART TIER - Add AI capabilities (Text AI, no computer vision)
ai = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "transformers>=4.35.0",
    # Note: No torch/vision here - text-only AI models
]

# PRO TIER - Add Computer Vision and OCR capabilities
vision = [
    "torch>=2.1.0",          # 70MB - Heavy ML framework
    "torchvision>=0.16.0",   # Computer vision models
    "opencv-python>=4.8.0",  # 36MB - Computer vision
    "pytesseract>=0.3.10",   # OCR capabilities
    "pdf2image>=1.16.3",     # PDF to image conversion
    # "browser-use>=0.7.0",    # Vision-guided browser automation
]

# ENTERPRISE TIER - Advanced analytics and reporting
analytics = [
    "polars>=0.19.0",        # High-performance data processing
    "plotly>=5.17.0",        # Advanced visualization
    "streamlit>=1.28.0",     # Interactive dashboards
    # "apache-superset>=3.0.0", # Business intelligence
]

# =============================================================================
# DEVELOPMENT & DEPLOYMENT
# =============================================================================

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

# Production deployment
production = [
    "gunicorn>=21.2.0",
    # "nginx>=1.25.0",
    "docker>=6.1.0",
]

# Convenience bundles
smart = ["processiq[ai]"]
pro = ["processiq[ai,vision]"] 
enterprise = ["processiq[ai,vision,analytics]"]
all = ["processiq[ai,vision,analytics,dev,production]"]

[project.urls]
Homepage = "https://github.com/pesnik/ProcessIQ"
Repository = "https://github.com/pesnik/ProcessIQ"
Issues = "https://github.com/pesnik/ProcessIQ/issues"
Discussions = "https://github.com/pesnik/ProcessIQ/discussions"
Documentation = "https://github.com/pesnik/ProcessIQ/wiki"

[project.scripts]
processiq = "processiq.cli:main"
piq = "processiq.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"processiq" = ["py.typed", "*.yaml", "*.json"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["playwright.*", "selenium.*", "cv2.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-v --cov=processiq --cov-report=term-missing"
asyncio_mode = "auto"
