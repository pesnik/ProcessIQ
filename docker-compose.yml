version: '3.8'

services:
  # ProcessIQ main application
  processiq:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://processiq:password@postgres:5432/processiq
      - REDIS_URL=redis://redis:6379/0
      - PLUGIN_DIRECTORY=/app/plugins
    volumes:
      - ./plugins:/app/plugins
      - ./config:/app/config
      - ./data:/app/data
      - ./output:/app/output
    depends_on:
      - postgres
      - redis
    networks:
      - processiq-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=processiq
      - POSTGRES_USER=processiq
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - processiq-network
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - processiq-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A processiq.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://processiq:password@postgres:5432/processiq
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./plugins:/app/plugins
      - ./config:/app/config
      - ./data:/app/data
      - ./output:/app/output
    depends_on:
      - postgres
      - redis
    networks:
      - processiq-network
    restart: unless-stopped
    scale: 2

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A processiq.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://processiq:password@postgres:5432/processiq
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./plugins:/app/plugins
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - processiq-network
    restart: unless-stopped

  # Nginx reverse proxy and static files
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/app/static
    depends_on:
      - processiq
    networks:
      - processiq-network
    restart: unless-stopped

  # Vector database for AI features (optional)
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-cohere,text2vec-huggingface,text2vec-palm,text2vec-openai,generative-openai,generative-cohere,generative-palm,ref2vec-centroid,reranker-cohere,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - processiq-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - processiq-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - processiq-network
    restart: unless-stopped

networks:
  processiq-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local